#!/usr/bin/env perl

use strict;
use warnings;


my $DEBUG = 0;

my $usage = "\n\n\tusage: $0 message\n\n";

my $message = join(" ", @ARGV);

unless($message) {
    die $usage;
}


my @alphabet = qw(a b c d e f g h i j k l m n o p q r s t u v w x y z : / . 0 1 2 3 4 5 6 7 8 9 L I N E);
push (@alphabet, ' ', "\n");

my %alphabet_to_val;
my %val_to_alphabet;
my $counter = 0;
for my $char (@alphabet) {
    $alphabet_to_val{$char} = $counter;
    $val_to_alphabet{$counter} = $char;
    $counter++;
}


my $num_digits = int(log(scalar(@alphabet))/log(2) + 1);
if ($num_digits % 2 != 0) {
    $num_digits++;
}

my %mapping = ( '00' => 'G',
                '01' => 'A',
                '10' => 'T',
                '11' => 'C');


my %reverse_mapping;
foreach my $key (keys %mapping) {
    my $val = $mapping{$key};
    $reverse_mapping{$val} = $key;
}


main: {

    if ($message =~ /\n/ || ! -f $message) {
        &encode_message($message);
    }
    else {
        my $decoded_msg = &decode_fasta($message);
        if ($decoded_msg) {
            print $decoded_msg;
        }
        else {
            print "Sorry, no message was decoded here.\n";
        }
    }
    
    exit(0);

}
    
####
sub decode_fasta {
    my ($fasta_file) = @_;

    my $decoded_msg = "";
    
    open(my $fh, $fasta_file) or die "Error, cannot open file: $fasta_file";
    my $seq = "";
    while(<$fh>) {
        chomp;
        if (/^>/) {
            if ($seq) {
                my $msg = &decode_seq($seq);
                $decoded_msg .= $msg if $msg;
                
                $seq = "";
            }
        }
        else {
            $seq .= $_;
        }
    }

    if ($seq) {
        my $msg = &decode_seq($seq);
        $decoded_msg .= $msg if $msg;

        $msg = &decode_seq(&reverse_complement($seq));
        $decoded_msg .= $msg if $msg;
                
    }

    return $decoded_msg;

}

####
sub reverse_complement {
    my ($seq) = @_;
    
    my $rc = reverse ($seq);
    $rc =~tr/ACGTacgtyrkmYRKM/TGCAtgcarymkRYMK/;
    return($rc);
}


####
sub decode_seq {
    my ($seq) = @_;

    my $ret_decoded_msg = "";
    
    for (my $i = 0; $i < $num_digits/2; $i++) {
        my $test_seq = $seq;
        if ($i > 0) {
            $test_seq = substr($seq, $i);
        }
        my $bin_coded_test_seq = &nuc_seq_to_binary_coding($test_seq);

        #print "$bin_coded_test_seq\n";
        my @deciphered_chars;
        while ($bin_coded_test_seq =~ /(\w{$num_digits})/g) {
            my $char = $val_to_alphabet{ oct("0b" . $1) };
            unless(defined($char)) {
                $char = "^";
            }
            push (@deciphered_chars, $char);            
        }
        
        my $decoded_msg = join("", @deciphered_chars);

        if ($decoded_msg =~ /LINE\d+ /) {
            $ret_decoded_msg .= "$decoded_msg\n";
        }
        
    }

    return ($ret_decoded_msg);

}


###
sub nuc_seq_to_binary_coding {
    my ($seq) = @_;

    my @chars = split(//, $seq);

    my $binary_coded_seq = "";
    foreach my $char (@chars) {
        my $bitcode = $reverse_mapping{$char};
        $binary_coded_seq .= $bitcode;
    }

    return($binary_coded_seq);
}

####
sub encode_message {
    my ($message) = @_;
        
    my @chars = split(//, $message);
        
    my $encoded_sequence = "";
    
    foreach my $char (@chars) {
        
        my $nuc_code = &nuc_encode_char($char);
        
        #print "$char => Nuc_code: $nuc_code\n";
        
        $encoded_sequence .= "$nuc_code";
    }

    print ">Encoded_seq\n$encoded_sequence\n";
    
 
    
}


####
sub nuc_encode_char {
    my ($char) = @_;
    
    my $nuc_int = $alphabet_to_val{$char};
    if (! defined($nuc_int)) {
        die "Error, char: [$char] not recognized";
    }
    
    my $bincode = sprintf("%0${num_digits}b", $nuc_int);
    
    print STDERR "$char => $bincode\n" if $DEBUG;
    
    my @nuc_codes;
    while ($bincode =~ /(\w{2})/g) {
        push (@nuc_codes, $1);
    }

    my $seq = "";
    for my $nuc_code (@nuc_codes) {
        my $nuc_char = $mapping{$nuc_code};

        # print "$nuc_code\t$nuc_char\n";
        
        $seq .= "$nuc_char";
    }

    return($seq);
    
    
}

    



